#!/usr/bin/env bash

function log(){
    location="$1"
    shift 1
    echo -e "$(date +"%b %d %T") $(whoami): \n$*" >> "$location"
}

function check_logging(){
    if [[ -w '/var/log/sbackup.log' && -f '/var/log/sbackup.log' ]]; then
        echo '/var/log/sbackup.log'
    else
        echo '/dev/stdout'
    fi
}

function schedule(){
    echo "sbackup-schedule run $1" | at -M now + "$2"
}

function schedule_from_config(){
    run_time="$(sbackup info -a frequency $1 2>&1)"

    if [[ "$?" == 0 ]]; then
        schedule "$1" "$run_time"
    else
        log "$2" "$run_time"
    fi
}

if [[ "$1" == "run" ]]; then
    shift 1
    export DISPLAY=':0.0'

    redirection="$(check_logging)"

    for backup in "$@"
    do
        declare error_code
        action="$(notify-send -a sbackup -i drive-harddisk \
            -A postpone=Postpone "$backup backup")"

        if [[ "$action" == 'postpone' ]]; then
            response=("$(yad --form --columns=2 --field='Postpone':NUM \
                --field="":CBE '' 'minute!hour!day!week' --center --no-escape \
                --sticky --separator "\n")")
            
            error_code="$?"
            if [[ "$error_code" == 0 ]]; then
                schedule "$backup" "${response[@]}"
            fi
        fi

        if [[ "$action" == "" || "$error_code" != 0 ]]; then
            response="$(yad --entry --numeric --center --no-escape --sticky \
                --entry-label Cores)"

            output="$(sbackup make --cores "${response:-1}" -- "$backup" 2>&1)"
            error_code="$?"

            log "$redirection" "$output"
            if [[ "$error_code" == 0 ]]; then
                notify-send -a sbackup -i drive-harddisk "$backup finished"
                schedule_from_config "$backup" "$redirection"
            else
                notify-send -a sbackup -i drive-harddisk \
                    -u critical "An error ocurred while making $backup backup"
            fi
        fi
    done
elif [[ "$1" == "-h" ]]; then
    echo 'Usage: sbackup-schedule BACKUPS [BACKUPS...]'
    echo '   or: sbackup-schedule run BACKUPS [BACKUPS...]'
    echo
    echo 'A script schedule the usage of sbackup. Uses sbackup'
    echo 'to obtain the frequency the backup should be made.'
    echo
    echo 'Positional arguments'
    echo '  BACKUPS                 the sbackup backups to schedule'
    echo '  run                     shows a notification of the noticing the user'
    echo '                          a backup is scheduled, and using yad and notify-send'
    echo '                          actions allows to specify a postponment time.'
    echo '                          Also allows the user to specify the cores used by zstd'
    echo '                          at the moment of creating the backup.'
    echo
    echo 'Options:'
    echo '  -h                      shows this help and exits'
else
    redirection="$(check_logging)"
    for backup in "$@"
    do
        schedule_from_config "$backup" "$redirection"
    done
fi
