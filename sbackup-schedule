#!/usr/bin/env bash

function help(){
    echo <<EOF
Usage: sbackup-schedule BACKUPS [BACKUPS...]
   or: sbackup-schedule run BACKUPS [BACKUPS...]

A script schedule the usage of sbackup. Uses sbackup
to obtain the frequency the backup should be made.

Positional arguments
  BACKUPS                 the sbackup backups to schedule
  run                     shows a notification of the noticing the user
                          a backup is scheduled, and using yad and notify-send
                          actions allows to specify a postponment time.
                          Also allows the user to specify the cores used by zstd
                          at the moment of creating the backup.

Options:
  -h                      shows this help and exits
EOF
}

function log(){
    local location="$1"
    shift 1
    echo -e "$(date +"%b %d %T") $(whoami): \n$*" >> "$location"
}

function check_logging(){
    if [[ -w '/var/log/sbackup.log' && -f '/var/log/sbackup.log' ]]; then
        echo '/var/log/sbackup.log'
    else
        echo '/dev/stdout'
    fi
}

function schedule(){
    echo "export DISPLAY=$DISPLAY; sbackup-schedule run $1" | at -M now + "$2"
}

function schedule_from_config(){
    local run_time="$(sbackup info -a frequency $1 2>&1)"

    if [[ "$?" == 0 ]]; then
        schedule "$1" "$run_time"
    else
        log "$2" "$run_time"
    fi
}

function run_backup(){
    local error_code
    local backup="$1"
    local redirection="$2"

    local action="$(notify-send -a sbackup -i drive-harddisk \
        -A postpone=Postpone "$backup backup")"

    if [[ "$action" == 'postpone' ]]; then
        local response=("$(yad --form --columns=2 --field='Postpone':NUM \
            --field="":CBE '' 'minute!hour!day!week' --center --no-escape \
            --sticky --separator "\n")")
        
        error_code="$?"
        if [[ "$error_code" == 0 ]]; then
            schedule "$backup" "${response[@]}"
        fi
    fi

    if [[ "$action" == "" || "$error_code" != 0 ]]; then
        local response="$(yad --entry --numeric --center --no-escape --sticky \
            --entry-label Cores)"

        local output="$(sbackup make --cores "${response:-1}" -- "$backup" 2>&1)"
        local error_code="$?"

        log "$redirection" "$output"
        if [[ "$error_code" == 0 ]]; then
            notify-send -a sbackup -i drive-harddisk "$backup finished"
            schedule_from_config "$backup" "$redirection"
        else
            notify-send -a sbackup -i drive-harddisk \
                -u critical "An error ocurred while making $backup backup"
        fi
    fi
}

case "$1" in
    "run")
        redirection="$(check_logging)"
        shift 1

        for backup in "$@"
        do
            run_backup "$backup" "$redirection"
        done;;
    "-h")
        help;;
    *)
        redirection="$(check_logging)"
        for backup in "$@"
        do
            schedule_from_config "$backup" "$redirection"
        done
esac

