#!/usr/bin/env python

import os
import subprocess
import configparser
import argparse
import ast
import sys
import errno
from datetime import datetime

def make_arg_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(
        prog='sbackup',
        description='Simple backup managment with configuration files.',
    )

    subparsers = parser.add_subparsers(required=True, dest='subcommand')

    subparsers.add_parser(
        'list', aliases=['ls'],
        help='''prints out a list of the backup entries in the
        configuration file''',
    )

    add = subparsers.add_parser(
        'add',
        help='''creates a new configuration entry with a given backup location
        and FILES, if no backup location is given, uses the current
        directory''',
    )

    add.add_argument(
        '-f', '--frequency',
        help='''specifies the frequency of the backups in the format accepted by
        at, in format now + frequency (see: man at), defaults to one week''',
        default='1 week',
        metavar='FRECUENCY',
    )

    add.add_argument(
        '-l', '--location',
        help='specifies the backup location',
        default=os.getcwd(),
        metavar='PATH'
    )

    add.add_argument(
        'name',
        help='specifies the name of the backup',
        metavar='NAME'
    )

    add.add_argument(
        'paths',
        nargs='+',
        help='list of files to use in the backup entry',
        metavar='FILES'
    )

    remove = subparsers.add_parser(
        'remove', aliases=['rm'],
        help='remove backups from the configuration file'
    )

    remove.add_argument(
        'backups',
        nargs='+',
        help='list of backups to delete',
        metavar='BACKUPS'
    )

    info = subparsers.add_parser(
        'info',
        help='remove backups from the configuration file'
    )

    info.add_argument(
        '-a', '--about',
        choices=['paths', 'location', 'frequency'],
        help='specifies the configuration fields to show',
        metavar='{paths,location,frequency}',
    )

    info.add_argument(
        'backups',
        nargs='+',
        help='list of backups of which the information is obtained',
        metavar='BACKUPS'
    )

    make = subparsers.add_parser(
        'make', aliases=['mk'],
        help='make the specified backups'
    )

    make.add_argument(
        '-l', '--location',
        help='overwrites the configuration backup location',
        metavar='PATH'
    )

    make.add_argument(
        '-c', '--cores',
        help='number of cores to be used by zstd (passed as -T, see ztsd docs)',
        default=1,
        type=int,
        metavar='CORES'
    )

    make.add_argument(
        'backups',
        nargs='+',
        help='list of backups to make',
        metavar='BACKUPS'
    )

    rename = subparsers.add_parser(
        'rename', aliases=['rn'],
        help='rename a backup entry'
    )

    rename.add_argument(
        'backup',
        help='name of the backup to rename',
        metavar='BACKUP'
    )

    rename.add_argument(
        'new_name',
        help='new name',
        metavar='NAME'
    )

    modify = subparsers.add_parser(
        'modify', aliases=['md'],
        help='modify the specified configuration fields'
    )

    modify_commands = modify.add_subparsers(
        required=True, dest='modify_subcommand'
    )

    location = modify_commands.add_parser(
        'location',
        help='changes the backups\' location'
    )

    location.add_argument(
        'new',
        help='the new backup location',
        metavar='PATH'
    )

    location.add_argument(
        'backups',
        nargs='+',
        help='backups to modify',
        metavar='BACKUPS'
    )

    frequency = modify_commands.add_parser(
        'frequency',
        help='changes the backups\' frequency'
    )

    frequency.add_argument(
        'new',
        help='the new frequency',
        metavar='FRECUENCY'
    )

    frequency.add_argument(
        'backups',
        nargs='+',
        help='backups to modify',
        metavar='BACKUPS'
    )
    
    addpaths = modify_commands.add_parser(
        'add',
        help='add paths the backup configuration'
    )

    addpaths.add_argument(
        'backup',
        help='backup to modify',
        metavar='BACKUP'
    )

    addpaths.add_argument(
        'paths',
        nargs='+',
        help='paths to add to the backup configuration',
        metavar='PATHS'
    )

    removepaths = modify_commands.add_parser(
        'remove',
        help='remove paths the backup configuration'
    )

    removepaths.add_argument(
        'backup',
        help='backup to modify',
        metavar='BACKUP'
    )

    removepaths.add_argument(
        'paths',
        nargs='+',
        help='paths to remove from the backup configuration',
        metavar='PATHS'
    )

    parser.add_argument(
        '-c', '--configuration-file',
        action='store',
        help='''specifies the configuration file to use, the default
        location is ~/.config/backup-config.ini''',
        default=f"{get_config_folder()}/backup-config.ini",
        metavar='CONFIG_FILE'
    )

    return parser

def get_config_folder():
    config_home = os.getenv('XDG_CONFIG_HOME')
    return config_home if config_home else f"{os.getenv('HOME')}/.config"

def check_config_file(config_file):
    config_file_path = os.path.abspath(config_file)
    exists = os.path.exists(config_file_path)
    if not exists:
        print("Configuration file not found, could be file permissions too.")
        sys.exit(errno.ENOENT)
    elif os.path.isdir(config_file_path):
        print("The configuration path is a directory.")
        sys.exit(errno.EISDIR)

    return config_file_path

def execute_if_found(backup, config, function):
    backup_found = True
    if backup in config.sections():
        function(backup, config)
    else:
        print(f'{backup} not found in configuration file.')
        backup_found = False
    
    return backup_found

def create_entry(args, config):
    if (not args.name in config.sections()
        or input('Entry already exists. Do you want to overwrite it?'
            + '("y" to acept): ') == 'y'):
        config[args.name] = {
            'paths': {os.path.abspath(path) for path in args.paths},
            'location': args.location,
            'frequency': args.frequency,
        }

    return False

def remove_entries(args, config):
    error = False
    for backup in args.backups:
        error |= not execute_if_found(
            backup, config, lambda backup, config: config.pop(backup)
        )
    
    return error

def alter_paths(args, config, operation):
    def assign(backup, config):
        config[backup]['paths'] = str(
            operation({os.path.abspath(path) for path in args.paths})
        )

    return not execute_if_found(args.backup, config, assign)

def modify_field(args, config, field):
    def assign(backup, config):
        config[backup][field] = args.new
    error = False

    for backup in args.backups:
        error |= not execute_if_found(backup, config, assign)

    return error 


def make_backup(args, config):
    date = datetime.today().strftime("%Y-%m-%d")
    error = False
    location = lambda: args.location
    if not args.location:
        location = lambda: config[backup]['location']
    
    def tar_run(backup, config):
        paths = ast.literal_eval(config[backup]['paths'])
        tar = subprocess.run(
            ["tar", "--ignore-failed-read", "-C", "/", "-c", "-I",
             f"zstd -19 -T{args.cores}", "-f",
             f"{location()}/{backup}-{date}.tar.zstd", *paths],
            check = True,
            stderr=sys.stderr,
            stdout=sys.stdout,
        )

    for backup in args.backups:
        error |= not execute_if_found(backup, config, tar_run)

    return error

def list_entries(config):
    for key in config.sections():
        print(key)

    return False

def show_paths(backup, config):
    for path in ast.literal_eval(config[backup]['paths']):
        print('  ' + path)

def show_all_info(backup, config):
    print('- Location: ' + config[backup]['location'])
    print('- Paths:')
    show_paths(backup, config)
    print('- frequency: ' + config[backup]['frequency'])

def show_info(args, config):
    info_function = show_all_info
    if args.about == 'paths':
        info_function = show_paths
    if args.about == 'location':
        info_function = lambda backup, config: print(
            config[backup]['location']
        )
    if args.about == 'frequency':
        info_function = lambda backup, config: print(
            config[backup]['frequency']
        )

    error = False
    if len(args.backups) == 1:
        error = not execute_if_found(args.backups[0], config, info_function)
    else:
        for backup in args.backups:
            print("\033[1m" + backup + "\033[0m")
            error |= not execute_if_found(backup, config, info_function)

    return error


def rename_backup(args, config):
    def rename(backup, config):
        config[args.new_name] = config[backup]
        config.pop(backup)

    error = False
    if args.new_name in config.section():
        error = True
        print(f'{args.backup} is already present in the configuration')

    error = error or not execute_if_found(args.backup, config, rename)

    return error

def update_configuration(config, config_file):
    config_file.seek(0)
    config_file.truncate()
    config.write(config_file)

def main():
    args = make_arg_parser().parse_args()
    config_file = check_config_file(args.configuration_file)
    with open(config_file, 'r+') as opened_conf_file:
        config = configparser.ConfigParser()
        
        try:
            config.read_file(opened_conf_file)
        except configparser.MissingSectionHeaderError:
            pass

        error = False
        if args.subcommand == 'ls' or args.subcommand == 'list':
            error = list_entries(config)
        elif args.subcommand == 'info':
            error = show_info(args, config)
        elif args.subcommand == 'remove' or args.subcommand == 'rm':
            error = remove_entries(args, config)
            update_configuration(config, opened_conf_file)
        elif args.subcommand == 'add':
            error = create_entry(args, config)
            update_configuration(config, opened_conf_file)
        elif args.subcommand == 'make' or args.subcommand == 'mk':
            error = make_backup(args, config)
        elif args.subcommand == 'rename' or args.subommand == 'rn':
            error = rename_backup(args, config)
            update_configuration(config, opened_conf_file)
        elif args.subcommand == 'modify' or args.subcommand == 'md':
            if (args.modify_subcommand == 'location'
                or args.modify_subcommand == 'frequency'):
                error = modify_field(args, config, args.modify_subcommand)
            else:
                config_paths = ast.literal_eval(config[args.backup]['paths'])
                if args.modify_subcommand == 'add':
                    error = alter_paths(args, config, config_paths.union)
                elif args.modify_subcommand == 'remove':
                    error = alter_paths(args, config, config_paths.difference)
            update_configuration(config, opened_conf_file)

    return error

if __name__ == "__main__":
    if main():
        sys.exit(1)
